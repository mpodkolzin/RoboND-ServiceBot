#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include <visualization_msgs/Marker.h>

visualization_msgs::Marker makeMarker(uint32_t shape){

		visualization_msgs::Marker marker;
		// Set the frame ID and timestamp.  See the TF tutorials for information on these.
    marker.header.frame_id = "map";
    marker.header.stamp = ros::Time::now();

    // Set the namespace and id for this marker.  This serves to create a unique ID
    // Any marker sent with the same namespace and id will overwrite the old one
    marker.ns = "add_markers";
    marker.id = 0;

    // Set the marker type.  Initially this is CUBE, and cycles between that and SPHERE, ARROW, and CYLINDER
    marker.type = shape;

    // Set the marker action.  Options are ADD, DELETE, and new in ROS Indigo: 3 (DELETEALL)
    marker.action = visualization_msgs::Marker::ADD;

    // Set the scale of the marker -- 1x1x1 here means 1m on a side
    marker.scale.x = 0.25;
    marker.scale.y = 0.25;
    marker.scale.z = 0.25;

    // Set the color -- be sure to set alpha to something non-zero!
    marker.color.r = 1.0f;
    marker.color.g = 0.0f;
    marker.color.b = 0.0f;
    marker.color.a = 1.0;
		
    marker.lifetime = ros::Duration();

		return marker;
}

void setMarkerPosition(visualization_msgs::Marker& marker, double pos_x, double pos_y, double orient_z, double orient_w){
		// Set the pose of the marker.  This is a full 6DOF pose relative to the frame/time specified in the header
    marker.pose.position.x = pos_x;msg->pose.pose.position
    marker.pose.position.y = pos_y;
    marker.pose.orientation.z = orient_z;
    marker.pose.orientation.w = orient_w;
}

void publishMarker(visualization_msgs::Marker& marker, ros::Publisher& marker_pub) {
		// Publish the marker
    while (marker_pub.getNumSubscribers() < 1)
    {
      if (!ros::ok())
      {
        throw "ROS not OK!";
      }
      ROS_WARN_ONCE("Please create a subscriber to the marker");
      sleep(1);
    }

    marker_pub.publish(marker);
}

void odomCallback(const nav_msgs::Odometry::ConstPtr& msg) {
	
}

int main( int argc, char** argv )
{
  ros::init(argc, argv, "add_markers");
  ros::NodeHandle n;
  ros::Duration duration(10);
  ros::Publisher marker_pub = n.advertise<visualization_msgs::Marker>("visualization_marker", 1);
  ros::Subscriber odom_sub  = n.subscribe("/odom", 1000, odomCallback);

  // Set our initial shape type to be a cube
  uint32_t shape = visualization_msgs::Marker::SPHERE;

	try {
  	visualization_msgs::Marker marker = makeMarker(shape);
		
		// Set pickup coordinates of marker then publish
		setMarkerPosition(marker, 3.53071165085, 7.02457809448, 0.679776960744, 0.733418900521);    
		publishMarker(marker, marker_pub);
		
		// Set dropoff coordinates of marker
		setMarkerPosition(marker, -4.454413414, 6.56948661804, 0.703485544441, 0.710709567096); 
		
		// Pause 5s before publishing the marker in the dropoff zone
		duration.sleep();  
 		// Publish marker at the dropoff zone
		publishMarker(marker, marker_pub);

	} catch(const char* msg) { 
		ROS_INFO("%s", msg);
		return 0;
	}
  

	ros::spin()
}
